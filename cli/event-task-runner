#!/usr/bin/env php
<?php
/**
 * @var \Psr\Container\ContainerInterface $container
 */

use Factories\LoggerFactory;

require __DIR__ . "/../cli-bootstrap.php";

// Establish JWT Auth Token for events...
$requestedScopes = $container->get('roles')['superadmin'];
$authentication = $container->get('authentication');
$user = new \Entities\User([
    'email_address' => 'rewardstack@alldigitalrewards.com',
    'id' => 0,
    'firstname' => 'Event Task Runner',
    'lastname' => 'System'
]);
/**
 * @var \Services\Authentication\Token $token
 */
$token = $authentication->getToken();
$token->setRequestedScopes($requestedScopes);
$token->setToken($token->generateUserToken($user)['token']);

require __DIR__ . '/../src/events.php';

$input = file_get_contents('php://stdin');
$eventData = json_decode($input, true);
$oEvent = new \Entities\Event;
$oEvent->exchange($eventData);

if ($oEvent->getAttemptCount() > 20) {
    // Event has been triggered too many times. Log the event as failed.
    /**
     * @var \Psr\Log\LoggerInterface $logger
     */
    $logger = LoggerFactory::getInstance();
    $logger->error($input, ['service' => 'Event']);
    exit(0);
}

if (!$emitter->hasListeners($oEvent->getName())) {
    /**
     * @var \Psr\Log\LoggerInterface $logger
     */
    $logger = LoggerFactory::getInstance();
    $logger->info(
        'No Listeners for Event',
        [
            'service' => 'Event',
            'event' => $oEvent->getName(),
            'entityId' => $oEvent->getEntityId()
        ]
    );
    exit(0);
}

$emitter->emit($oEvent);
exit(0);
